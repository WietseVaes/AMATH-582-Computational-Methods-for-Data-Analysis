clear all; close all; clc

load Kraken.mat

L = 10; % spatial domain
n = 64; % Fourier modes
Thresholds = [0.3, 0.5, 0.7, 0.9];
threshold = Thresholds(3); % Change this threshold to see what happens to the plot

x2 = linspace(-L, L, n+1); x = x2(1:n); y = x; z = x;
k = (2*pi/(2*L))*[0:(n/2 - 1) - n/2: -1]; ks = fftshift(k);

[X, Y, Z] = meshgrid(x, y, z);
[Kx, Ky, Kz] = meshgrid(ks, ks, ks);

sigma = 1;
Gaussian = 1/sqrt((2*pi)^3*sigma^3)*exp(-(X.^2+Y.^2+Z.^2)/(2*sigma^2));

for j = 1:49
    Un(:, :, :) = reshape(Kraken(:, j), n, n, n); % We need to reshape our data into a tensor, which represents a cube of Fourier modes in x-y-z space
    %{
    M = max(abs(Un), [], 'all');
    close all, isosurface(X, Y, Z, abs(Un)/M, threshold)
    axis([min(x) max(x) min(y) max(y) min(z) max(z)]), grid on, drawnow
    pause
    %}
    for index1 = 1:n
        meanval{1}[index1] = mean(Un(index1, :, :));
        meanval[index1]{2} = mean(Un(:,index1,:));
        meanval[index1]{3} = mean(Un(:,:,index1));
    end

    %{
    U{j} = ifft(ifftshift(Un));
    Ufft{j} = fftshift(fft(Un));
    Ureal{j} = ifft(ifftshift(Ufft{j}.*Gaussian));
    M = max(abs(U{j}), [], 'all');
    close all, isosurface(X, Y, Z, abs(U{j})/M, threshold)
    axis([min(x) max(x) min(y) max(y) min(z) max(z)]), grid on, drawnow
    pause
    %}
end


